name: build and run all tests
on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  # Path to the solution file relative to the root of the project.
  SOLUTION_FILE_PATH: ./Team34/Code34
  UNIT_TESTING_FILE_PATH: Team34\Code34\Release\UnitTesting.dll
  AUTO_TESTING_DIRECTORY: ./Team34/Tests34
  AUTO_TESTER_FILE_PATH: ../Code34/Release/Autotester.exe
  # Configuration type to build.
  # You can convert this to a build matrix if you need coverage of multiple configuration types.
  # https://docs.github.com/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
  BUILD_CONFIGURATION: Release

permissions:
  contents: read

jobs:
  build_and_run_VSTests:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v3
      with: # This is so the Pipe loads the LFS-tracked files
          lfs: true

    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v1.0.2

    - name: Restore NuGet packages
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: nuget restore ${{env.SOLUTION_FILE_PATH}}

    - name: Build
      working-directory: ${{env.GITHUB_WORKSPACE}}
      # Add additional options to the MSBuild command line here (like platform or verbosity level).
      # See https://docs.microsoft.com/visualstudio/msbuild/msbuild-command-line-reference
      run: msbuild /m /p:Configuration=${{env.BUILD_CONFIGURATION}} ${{env.SOLUTION_FILE_PATH}}

    - name: Setup VSTest and add to PATH
      uses: darenm/Setup-VSTest@v1
      id: setup_vstest

    - name: Run VSTest
      id: run_vstest
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: vstest.console.exe /Platform:x86 ${{env.UNIT_TESTING_FILE_PATH}}

    - name: Run System Tests
      working-directory: ${{env.AUTO_TESTING_DIRECTORY}}
      run: |
          ./auto_testing.ps1 -gui 0 -autotester_file ${{env.AUTO_TESTER_FILE_PATH}}
